Must have рівень: 

Зроби порівняння статичних та динамічних технік тестування. Наведи переваги та можливі обмеження при використанні кожної з них. 



Статистична техніка тестування
Динамічна техніка тестування
Основна інформація
Тип тестування, який припускає, що програмний код під час тестування не буде виконуватися. 
тип тестування, який передбачає запуск програмного коду. Таким чином, аналізується поведінка програми під час її роботи.
Перевага №1
Знижує вартість фіксу знайдених багів, оскільки виявляє баги на ранніх етапах циклу розробки програмного забезпечення.
Це ретельне дослідження, яке розглядає всю функціональність програми, тому якість відповідає найвищим стандартам.


Перевага №2
Підвищує інформованість про різні проблеми якості програмного забезпечення.


Процес динамічного тестування добре налагоджений, додаток тестується з точки зору користувача, що підвищує якість ПЗ.
Перевага №3 (і т.д.)
Покращує обмін критичної і важливої інформації між членами команди.


Виявлення складних помилок, які могли вислизнути на етапі код рев'ю.


Обмеження №1
Процес статичного тестування може займати багато часу, так як в основному він виконується вручну.


Оскільки динамічне тестування являє собою складний процес, воно займає багато часу.


 
Обмеження №2
Перешкоджає виявленню вразливостей, представлених в середовищі виконання.


Динамічне тестування зазвичай виконується після завершення кодування, і знайдені баги виявляються пізніше в життєвому циклі розробки.


Обмеження №3 (і т.д.)
Виконується після деплоя коду
Висока вартість проведення тестування.
Висновок
Статичне тестування вимагає багато часу на бурхливі дискусії та зустрічі, все ж варто витратити час на запобігання появи дефектів на останніх етапах розробки продукту. Тому статичне тестування по праву вважається важливим кроком на шляху до розробки ПЗ без помилок.
Важливість динамічного тестування величезна. Завдяки безпосередньому виконанню тестів програмного забезпечення (перевірки функціональної поведінки, продуктивності, надійності та інших важливих аспектів) команда може перевірити і підтвердити якість і ефективність ПЗ



Середній рівень:

Виконай завдання попереднього рівня.
Наступне твердження стосується покриття рішень:
Коли код має одну ‘IF” умову, не має циклів (LOOP)  або перемикачів (CASE), будь-який тест, який ми виконаємо, дасть результат 50% покриття рішень (decision coverage). 

Яке твердження є коректним?
Коректно. Будь-який тест кейс надає 100% покриття тверджень, таким чином покриває 50% рішень.
Коректно. Результат будь-якого тесту умови IF буде або правдими, або ні.
Некоректно. Один тест може гарантувати 25% перевірки рішень в цьому випадку.
Некоректно, бо занадто загальне твердження. Ми не можемо знати, чи є воно коректним, бо це залежить від тестованого ПЗ.

Є псевдокод: Switch PC on -> Start MS Word -> IF MS Word starts THEN -> Write a poem -> Close MS Word. 

Скільки тест кейсів знадобиться, щоб перевірити його функціонал? 
1 – для покриття операторів, 2 – для покриття рішень
1 – для покриття операторів, 1 – для покриття рішень
2 – для покриття операторів, 2 – для покриття рішень
2 – для покриття операторів, 1 – для покриття рішень

Скільки потрібно тестів для перевірки тверджень коду:    
2
1
3
4
Програма максимум:

Мінімальний набір тест-кейсів, щоб переконатися, що всі запитання були поставлені, всі комбінації були пройдені та всі відповіді були отримані 4 штуки.



 

